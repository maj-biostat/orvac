// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_dotrial
Rcpp::List rcpp_dotrial(const int idxsim, const Rcpp::List& cfg, const bool rtn_trial_dat);
RcppExport SEXP _orvacsim_rcpp_dotrial(SEXP idxsimSEXP, SEXP cfgSEXP, SEXP rtn_trial_datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type idxsim(idxsimSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< const bool >::type rtn_trial_dat(rtn_trial_datSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dotrial(idxsim, cfg, rtn_trial_dat));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dat
arma::mat rcpp_dat(const Rcpp::List& cfg);
RcppExport SEXP _orvacsim_rcpp_dat(SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dat(cfg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_clin
Rcpp::List rcpp_clin(arma::mat& d, const Rcpp::List& cfg, const int look, const int idxsim);
RcppExport SEXP _orvacsim_rcpp_clin(SEXP dSEXP, SEXP cfgSEXP, SEXP lookSEXP, SEXP idxsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const int >::type idxsim(idxsimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_clin(d, cfg, look, idxsim));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_clin_set_state
Rcpp::List rcpp_clin_set_state(arma::mat& d, const int look, const double fu, const Rcpp::List& cfg, const int idxsim);
RcppExport SEXP _orvacsim_rcpp_clin_set_state(SEXP dSEXP, SEXP lookSEXP, SEXP fuSEXP, SEXP cfgSEXP, SEXP idxsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const double >::type fu(fuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< const int >::type idxsim(idxsimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_clin_set_state(d, look, fu, cfg, idxsim));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_immu
Rcpp::List rcpp_immu(const arma::mat& d, const Rcpp::List& cfg, const int look);
RcppExport SEXP _orvacsim_rcpp_immu(SEXP dSEXP, SEXP cfgSEXP, SEXP lookSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_immu(d, cfg, look));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_n_obs
int rcpp_n_obs(const arma::mat& d, const int look, const Rcpp::NumericVector looks, const Rcpp::NumericVector months, const double info_delay);
RcppExport SEXP _orvacsim_rcpp_n_obs(SEXP dSEXP, SEXP lookSEXP, SEXP looksSEXP, SEXP monthsSEXP, SEXP info_delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type looks(looksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type months(monthsSEXP);
    Rcpp::traits::input_parameter< const double >::type info_delay(info_delaySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_n_obs(d, look, looks, months, info_delay));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_lnsero
Rcpp::List rcpp_lnsero(const arma::mat& d, const int nobs);
RcppExport SEXP _orvacsim_rcpp_lnsero(SEXP dSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lnsero(d, nobs));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_immu_interim_post
void rcpp_immu_interim_post(const arma::mat& d, arma::mat& m, const int nobs, const int post_draw, const Rcpp::List& lnsero);
RcppExport SEXP _orvacsim_rcpp_immu_interim_post(SEXP dSEXP, SEXP mSEXP, SEXP nobsSEXP, SEXP post_drawSEXP, SEXP lnseroSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const int >::type post_draw(post_drawSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lnsero(lnseroSEXP);
    rcpp_immu_interim_post(d, m, nobs, post_draw, lnsero);
    return R_NilValue;
END_RCPP
}
// rcpp_immu_interim_ppos
Rcpp::List rcpp_immu_interim_ppos(const arma::mat& d, const arma::mat& m, const int look, const int nobs, const int nimpute, const int post_draw, const Rcpp::List& lnsero, const Rcpp::List& cfg);
RcppExport SEXP _orvacsim_rcpp_immu_interim_ppos(SEXP dSEXP, SEXP mSEXP, SEXP lookSEXP, SEXP nobsSEXP, SEXP nimputeSEXP, SEXP post_drawSEXP, SEXP lnseroSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const int >::type nimpute(nimputeSEXP);
    Rcpp::traits::input_parameter< const int >::type post_draw(post_drawSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lnsero(lnseroSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_immu_interim_ppos(d, m, look, nobs, nimpute, post_draw, lnsero, cfg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_immu_ppos_test
Rcpp::List rcpp_immu_ppos_test(const arma::mat& d, const arma::mat& m, const int look, const int nobs, const int nimpute, const int post_draw, const Rcpp::List& lnsero, const Rcpp::List& cfg);
RcppExport SEXP _orvacsim_rcpp_immu_ppos_test(SEXP dSEXP, SEXP mSEXP, SEXP lookSEXP, SEXP nobsSEXP, SEXP nimputeSEXP, SEXP post_drawSEXP, SEXP lnseroSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const int >::type nimpute(nimputeSEXP);
    Rcpp::traits::input_parameter< const int >::type post_draw(post_drawSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lnsero(lnseroSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_immu_ppos_test(d, m, look, nobs, nimpute, post_draw, lnsero, cfg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_outer
void rcpp_outer(const arma::vec& z, const arma::vec& t, arma::mat& out);
RcppExport SEXP _orvacsim_rcpp_outer(SEXP zSEXP, SEXP tSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type out(outSEXP);
    rcpp_outer(z, t, out);
    return R_NilValue;
END_RCPP
}
// rcpp_logrank
Rcpp::List rcpp_logrank(const arma::mat& d, const int look, const Rcpp::List& cfg);
RcppExport SEXP _orvacsim_rcpp_logrank(SEXP dSEXP, SEXP lookSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_logrank(d, look, cfg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_gamma
arma::vec rcpp_gamma(const int n, const double a, const double b);
RcppExport SEXP _orvacsim_rcpp_gamma(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gamma(n, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_orvacsim_rcpp_dotrial", (DL_FUNC) &_orvacsim_rcpp_dotrial, 3},
    {"_orvacsim_rcpp_dat", (DL_FUNC) &_orvacsim_rcpp_dat, 1},
    {"_orvacsim_rcpp_clin", (DL_FUNC) &_orvacsim_rcpp_clin, 4},
    {"_orvacsim_rcpp_clin_set_state", (DL_FUNC) &_orvacsim_rcpp_clin_set_state, 5},
    {"_orvacsim_rcpp_immu", (DL_FUNC) &_orvacsim_rcpp_immu, 3},
    {"_orvacsim_rcpp_n_obs", (DL_FUNC) &_orvacsim_rcpp_n_obs, 5},
    {"_orvacsim_rcpp_lnsero", (DL_FUNC) &_orvacsim_rcpp_lnsero, 2},
    {"_orvacsim_rcpp_immu_interim_post", (DL_FUNC) &_orvacsim_rcpp_immu_interim_post, 5},
    {"_orvacsim_rcpp_immu_interim_ppos", (DL_FUNC) &_orvacsim_rcpp_immu_interim_ppos, 8},
    {"_orvacsim_rcpp_immu_ppos_test", (DL_FUNC) &_orvacsim_rcpp_immu_ppos_test, 8},
    {"_orvacsim_rcpp_outer", (DL_FUNC) &_orvacsim_rcpp_outer, 3},
    {"_orvacsim_rcpp_logrank", (DL_FUNC) &_orvacsim_rcpp_logrank, 3},
    {"_orvacsim_rcpp_gamma", (DL_FUNC) &_orvacsim_rcpp_gamma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_orvacsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
