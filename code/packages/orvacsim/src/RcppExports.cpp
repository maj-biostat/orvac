// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_gen_dat
arma::mat rcpp_gen_dat(const Rcpp::List cfg);
RcppExport SEXP _orvacsim_rcpp_gen_dat(SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gen_dat(cfg));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mod_immu
arma::mat rcpp_mod_immu(const arma::mat d, const Rcpp::List cfg, const int look);
RcppExport SEXP _orvacsim_rcpp_mod_immu(SEXP dSEXP, SEXP cfgSEXP, SEXP lookSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mod_immu(d, cfg, look));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_censoring
arma::mat rcpp_censoring(const arma::mat d, const int look, const int trtstatus, const int iend, const float curmonth, const float surveillancemonths);
RcppExport SEXP _orvacsim_rcpp_censoring(SEXP dSEXP, SEXP lookSEXP, SEXP trtstatusSEXP, SEXP iendSEXP, SEXP curmonthSEXP, SEXP surveillancemonthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type look(lookSEXP);
    Rcpp::traits::input_parameter< const int >::type trtstatus(trtstatusSEXP);
    Rcpp::traits::input_parameter< const int >::type iend(iendSEXP);
    Rcpp::traits::input_parameter< const float >::type curmonth(curmonthSEXP);
    Rcpp::traits::input_parameter< const float >::type surveillancemonths(surveillancemonthsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_censoring(d, look, trtstatus, iend, curmonth, surveillancemonths));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_orvacsim_rcpp_gen_dat", (DL_FUNC) &_orvacsim_rcpp_gen_dat, 1},
    {"_orvacsim_rcpp_mod_immu", (DL_FUNC) &_orvacsim_rcpp_mod_immu, 3},
    {"_orvacsim_rcpp_censoring", (DL_FUNC) &_orvacsim_rcpp_censoring, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_orvacsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
